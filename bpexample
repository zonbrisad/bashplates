#!/usr/bin/env bash
# shellcheck disable=2034
# shellcheck disable=1090
#---------------------------------------------------------------------
#
#  [Description]
#    Bashplate example script. This script inludes a number of examples
#    demonstrating a number features of the bashplate template.
#  
#  [Author]
#    Peter Malmberg <peter.malmberg@gmail.com>
#
#  [Date]
#    2016-xx-xx
#
#  [License]
#     MIT
#
#---------------------------------------------------------------------
# [Bashplates]
# This script is generated from bashplates template generator.
#
# Bashplates is developed by:
# Peter Malmberg <peter.malmberg@gmail.com>
#
# Bashplates is available at:
# https://github.com/zonbrisad/bashplates
#---------------------------------------------------------------------
#

# Display commands as they are executed
#set -o xtrace
# Display shell input lines as they are read
#set -v
set -o errtrace

# Exit script when a command fails. Append ||true if error is expected
#set -o errexit # || true
# Exit script when undeclared variable is used
#set -o nounset
# Exit script when pipe fails
set -o pipefail

#---------------------------------------------------------------------
# User defined Settings
#---------------------------------------------------------------------


#---------------------------------------------------------------------
# User defined functions
#---------------------------------------------------------------------

##N- Bashplate tests

logtest() { ## Test of log function
  bpRm "${LOGFILE}"
  bpLogInfo "Some information log"
  bpLogWarning "Oh no a warning"
  bpLogError "F#\$ck"
  bpLogCritical "SNAFU"
  bpLogOk "Ahh"
  log
}

print() { ## Bashplate text output function examples 
  echo -e "\nExample of $E_GREEN bpLine $E_END"
  bpLine
  
  echo -e "\nExample of $E_GREEN bpTextLine $E_END"
  bpTextLine "Kalle"
  
  echo -e "\nExample of $E_GREEN bpPrintInfo $E_END"
  bpPrintInfo "Kalle" "desc"
  
  
  echo -e "\nExample of $E_GREEN bpColorizeFile $E_END"
  F="/use/local/var/log/messages"
  echo -n "The filename $(bpColorizeFile $F) is colorized."

  echo
}

traptest() { ## Trap signal test
  TRAPTEST=1
	bpRead "Press CTRL-C" 
}

tltest() { ## Test textline
  bpTextLineC "Green" "${E_BR_GREEN}" "${E_GREEN}" "_"
  bpTextLineC "Magenta" "${E_BR_MAGENTA}" "${E_MAGENTA}" "_"
  bpTextLineC "Blue" "${E_BR_BLUE}" "${E_BLUE}" "_"
  bpTextLineC "Red" "${E_BR_RED}" "${E_RED}" "_"
  bpTextLineC "Yellow" "${E_BR_YELLOW}" "${E_YELLOW}" "_"
  bpTextLineC "Cyan" "${E_BR_CYAN}" "${E_CYAN}" "_"
  bpTextLineC "White" "${E_WHITE}" "${E_GRAY}" "_"
  bpTextLine "Standard colors"
}


roottest() { ## Test assert root
  bpAssertRoot
  bpOk "Great you are root"
}

locktest() { ## Lock file test
  bpAssertNoLockFile
  "${BPSCRIPTPATH}/bpexample" locktest  
}

assertProgs() { ## Assert required programs test 
  bpAssertRequiredProgs
}

prefunc() {
  echo -e "${E_WHITE}Prefunc${E_END} -------------------------------------------------------"
}

postfunc() {
  echo -e "${E_WHITE}Postfunc${E_END} ------------------------------------------------------"
}

infoHook() {
  bpPrintVar "Test1"       "Information test1"
  bpPrintVar "Test2"       "Information test2"
}


appendTest() { ## Testing append line to file function
  rm -f append
  touch append
  
  bpAppendIfNoSuchLine "append" "Line to append1"
  bpAppendIfNoSuchLine "append" "Line to append2"
  bpAppendIfNoSuchLine "append" "Line to append3"
  
  echo "File first time"
  cat append

  bpAppendIfNoSuchLine "append" "Line to append1"
  bpAppendIfNoSuchLine "append" "Line to append2"
  bpAppendIfNoSuchLine "append" "Line to append3"

  echo -e "\nFile second time"
  cat append

  bpRemoveLineContaining "append" "append2"
  echo -e "\nFile third time"
  cat append
  

}

errorTest() { ## Test of error messages
  echo "$LOGFILE"
  bpInfo "Info test"
  bpWarning "Warning test"
  bpError "Error test"
  bpCritical "Critical test"
}


##N- Hook tests

precmd() { ## Test preCmdHook 
  echo
}

postcmd() { ## Test postCmdHook 
  echo
}

preCmdHook() {
  if [ "$1" == "precmd" ]; then
    bpOk "This is the precmdhook"
  fi
}

postCmdHook() {
  if [ "$1" == "postcmd" ]; then
    bpOk "This is the postmdhook"
  fi
}

##N- Misc

pipe() { ## pipe example
  stdin=$(cat)
  bpInfo "The follwing text was \"piped\" to the script"
  echo -e "$stdin"
}

##N- Some fun

bpElapsedTime() { ## Return elapsed time
  #dt=$((etime - stime))
  dt=$SECONDS        # total time elapsed in seconds
  ds=$((dt % 60))    
  dm=$(((dt / 60) % 60))
  dh=$((dt / 3600))
  printf '%02d:%02d:%02d' $dh $dm $ds
}

print_spinner() {

  XX=("|" "/" "-" "\\")
  if [ -n "$SPINNER" ]; then
    SPINNER=$(( SPINNER + 1))
    if [ $SPINNER -gt 3 ]; then
      SPINNER=0
    fi
  else
    SPINNER=0
  fi
  echo " ${XX[$SPINNER]} $1"
  echo -e "$E_RETURN $E_UP"
}


spinner() { ## Spinner example
  echo "$E_HIDE"
  for i in {1..100}; do
    print_spinner "Processing... $(bpElapsedTime)"
    sleep 0.1
  done
  echo -e "${E_SHOW}"
}

bpWait() { ##D Wait for n seconds
  echo "${E_HIDE}"
  a=0
  tmp=${SECONDS}
  while [ "$a" -lt "$1" ]; do
    a=$(( SECONDS - tmp ))
    print_spinner "Waiting... $a"
    sleep 0.1
  done
  echo -e "${E_SHOW}"
}


wait() { ## Wait for n seconds
  bpWait "$2"
}

print_bar() {

  echo -n " ["
  for jx in $(seq 1 "${2}"); do
    echo -n "="
  done
  for jx in $(seq 1 $((${1} - ${2}))); do
    echo -n " "
  done
  echo  "] ${2}"   
}

bar() { ## print a testbar (ANSI)
  bpTextLine "Bar test"
  echo -en "$E_HIDE"
  for i in {1..60}; do
    sleep 0.03
    print_bar 60 $i
    echo -e "$E_RETURN $E_UP"
  done
  echo -e "$E_SHOW"
}

shade() { ## Shade demo (256 color terminal required)
  echo -en '\033]1 Kalle \007'
  echo
  bpTextLine "B/W shading"
  echo
  echo
  echo -e "$E_RETURN"
  echo -en "$E_HIDE"
  for i in {232..255} {255..232} ; do
    sleep 0.05
    printf "\x1b[38;5;%sm _____ Shading text _____ ${E_END}" "$i"
    echo -e "$E_RETURN"
  done
  echo -e "$E_SHOW"
}


attr() { ## demonstrate font attributes
  echo
  bpTextLine "Font attributes"
  echo
  echo -e "${E_ATTR_UNDERLINE}Underline${E_END}"
  echo -e "${E_ATTR_BOLD}Bold${E_END}"
  echo -e "${E_ATTR_BLINK}Blink${E_END}"
  echo -e "${E_ATTR_LOWI}Low Intensity${E_END}"
  echo -e "${E_ATTR_REVERSE}Reverse video${E_END}"
  echo
}

color1() { ## Standard 16 colors 
  FCOLORS=( ${E_BLACK} ${E_RED} ${E_GREEN} ${E_YELLOW} ${E_BLUE} ${E_MAGENTA} ${E_CYAN} ${E_GRAY} ${E_DARKGRAY} ${E_BR_RED} ${E_BR_GREEN} ${E_BR_YELLOW} ${E_BR_BLUE} ${E_BR_MAGENTA} ${E_BR_CYAN} ${E_WHITE} )
  BCOLORS=( ${E_ON_BLACK} ${E_ON_RED} ${E_ON_GREEN} ${E_ON_YELLOW} ${E_ON_BLUE} ${E_ON_MAGENTA} ${E_ON_CYAN} ${E_ON_WHITE} )

  FCOLORS2=( E_BLACK E_RED E_GREEN E_YELLOW E_BLUE E_MAGENTA E_CYAN E_GRAY E_DARKGRAY E_BR_RED E_BR_GREEN E_BR_YELLOW E_BR_BLUE E_BR_MAGENTA E_BR_CYAN E_WHITE )
  BCOLORS2=( E_ON_BLACK E_ON_RED E_ON_GREEN E_ON_YELLOW E_ON_BLUE E_ON_MAGENTA E_ON_CYAN E_ON_WHITE )

  echo
  bpTextLine "16 color map"
  for fc in ${FCOLORS2[*]}; do
    eval "FG=\$$fc"
    for bc in ${BCOLORS2[*]}; do
      eval "BG=\$$bc"
      printf "${FG}${BG}%-12s${E_END}" "$fc"
    done
    echo
  done

  echo
  return
  for fc in ${FCOLORS[*]}
  do
    for bc in ${BCOLORS[*]}
    do
      echo  -en "${fc}${bc}   XXXX   ${E_END}"
    done
        echo ""
  done
  echo -e "\n\n"
}  

color2() { ## Show example of all 256 colors
  
  echo
  bpTextLine "256 Colors foreground"
  echo
  for i in {0..231} ; do
    printf "\x1b[38;5;%sm  %3d  ${E_END} " "$i" "$i"
    if (( i == 7 )) || (( i == 15 )) || ( (( i > 15 )) && (( (i-15) % 6 == 0 )) ); then
      echo
      
      if (( i == 15)); then
        echo
      fi
    fi
  done
  
  echo
  for i in {232..255} ; do
    printf "\x1b[38;5;%sm %3d ${E_END}" "$i" "$i"
    if (( i == 243 )); then 
      echo
    fi
  done
  echo -e "\n"


  echo
  bpTextLine "256 Colors background"
  echo
  for i in {0..231} ; do
    printf "\x1b[48;5;%sm  %3d  ${E_END} " "$i" "$i"
    if (( i == 7 )) || (( i == 15 )) || ( (( i > 15 )) && (( (i-15) % 6 == 0 )) ); then
      echo
      
      if (( i == 15)); then
        echo
      fi
    fi
  done
  
  echo
  for i in {232..255} ; do
    printf "\x1b[48;5;%sm %3d ${E_END}" "$i" "$i"
    if (( i == 243 )); then 
      echo
    fi
  done
  echo -e "\n"
}


color3() { ## Color test
  echo -e "[${E_BLACK}${E_ON_RED}Error${E_END}] ${E_BR_RED}Error text${E_END}"
  echo -e "[${E_WHITE}${E_ON_YELLOW}Warning${E_END}] ${E_BR_YELLOW}Warning text${E_END}"
}

FLAG_BLUE="\x1b[48;5;20m"
FLAG_YELLOW="\x1b[48;5;226m"

smallFlag() {
  echo -e "${FLAG_BLUE}     ${FLAG_YELLOW}  ${FLAG_BLUE}          ${E_END}"
  echo -e "${FLAG_BLUE}     ${FLAG_YELLOW}  ${FLAG_BLUE}          ${E_END}"
  echo -e "${FLAG_YELLOW}                 ${E_END}"
  echo -e "${FLAG_BLUE}     ${FLAG_YELLOW}  ${FLAG_BLUE}          ${E_END}"
  echo -e "${FLAG_BLUE}     ${FLAG_YELLOW}  ${FLAG_BLUE}          ${E_END}"
}

mediumFlag() { 
  echo -e "${FLAG_BLUE}        ${FLAG_YELLOW}  ${FLAG_BLUE}               ${E_END}"
  echo -e "${FLAG_BLUE}        ${FLAG_YELLOW}  ${FLAG_BLUE}               ${E_END}"
  echo -e "${FLAG_BLUE}        ${FLAG_YELLOW}  ${FLAG_BLUE}               ${E_END}"
  echo -e "${FLAG_YELLOW}                         ${E_END}"
  echo -e "${FLAG_BLUE}        ${FLAG_YELLOW}  ${FLAG_BLUE}               ${E_END}"
  echo -e "${FLAG_BLUE}        ${FLAG_YELLOW}  ${FLAG_BLUE}               ${E_END}"
  echo -e "${FLAG_BLUE}        ${FLAG_YELLOW}  ${FLAG_BLUE}               ${E_END}"
}

largeFlag() { 
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
  echo -e "${FLAG_YELLOW}                                      ${E_END}"
  echo -e "${FLAG_YELLOW}                                      ${E_END}"
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
  echo -e "${FLAG_BLUE}           ${FLAG_YELLOW}    ${FLAG_BLUE}                       ${E_END}"
}

hugeFlag() { 
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_YELLOW}                                               ${E_END}"
  echo -e "${FLAG_YELLOW}                                               ${E_END}"
  echo -e "${FLAG_YELLOW}                                               ${E_END}"  
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
  echo -e "${FLAG_BLUE}              ${FLAG_YELLOW}      ${FLAG_BLUE}                           ${E_END}"
}

FLAG_RED=$'\e[41m'         # Red
FLAG_WHITE=$'\e[47m'       # White

norwayFlag() { 
  
#  echo -e "${FLAG_RED}           ${FLAG_BLUE}    ${FLAG_RED}                       ${E_END}"
#  echo -e "${FLAG_RED}           ${FLAG_BLUE}    ${FLAG_RED}                       ${E_END}"
#  echo -e "${FLAG_RED}           ${FLAG_BLUE}    ${FLAG_RED}                       ${E_END}"
  echo -e "${FLAG_RED}         ${FLAG_WHITE}  ${FLAG_BLUE}    ${FLAG_WHITE}  ${FLAG_RED}                     ${E_END}"
  echo -e "${FLAG_RED}         ${FLAG_WHITE}  ${FLAG_BLUE}    ${FLAG_WHITE}  ${FLAG_RED}                     ${E_END}"
  echo -e "${FLAG_RED}         ${FLAG_WHITE}  ${FLAG_BLUE}    ${FLAG_WHITE}  ${FLAG_RED}                     ${E_END}"
  echo -e "${FLAG_RED}         ${FLAG_WHITE}  ${FLAG_BLUE}    ${FLAG_WHITE}  ${FLAG_RED}                     ${E_END}"
  echo -e "${FLAG_WHITE}           ${FLAG_BLUE}    ${FLAG_WHITE}                       ${E_END}"
  echo -e "${FLAG_BLUE}                                      ${E_END}"
  echo -e "${FLAG_BLUE}                                      ${E_END}"
  echo -e "${FLAG_WHITE}           ${FLAG_BLUE}    ${FLAG_WHITE}                       ${E_END}"
  echo -e "${FLAG_RED}         ${FLAG_WHITE}  ${FLAG_BLUE}    ${FLAG_WHITE}  ${FLAG_RED}                     ${E_END}"
  echo -e "${FLAG_RED}         ${FLAG_WHITE}  ${FLAG_BLUE}    ${FLAG_WHITE}  ${FLAG_RED}                     ${E_END}"
  echo -e "${FLAG_RED}         ${FLAG_WHITE}  ${FLAG_BLUE}    ${FLAG_WHITE}  ${FLAG_RED}                     ${E_END}"
  echo -e "${FLAG_RED}         ${FLAG_WHITE}  ${FLAG_BLUE}    ${FLAG_WHITE}  ${FLAG_RED}                     ${E_END}"

#  echo -e "${FLAG_RED}           ${FLAG_BLUE}    ${FLAG_RED}                       ${E_END}"
#  echo -e "${FLAG_RED}           ${FLAG_BLUE}    ${FLAG_RED}                       ${E_END}"
#  echo -e "${FLAG_RED}           ${FLAG_BLUE}    ${FLAG_RED}                       ${E_END}"
#  echo -e "${FLAG_RED}           ${FLAG_BLUE}    ${FLAG_RED}                       ${E_END}"
#  echo -e "${FLAG_RED}           ${FLAG_BLUE}    ${FLAG_RED}                       ${E_END}"
}


flags() { ## Print swedish flags
  echo
  smallFlag
  echo
  mediumFlag
  echo
  largeFlag
  echo
  hugeFlag
  echo
#  norwayFlag
#  echo
}

flash() { ## Flash screen
  while true; do 
	  printf \\e[?5h; sleep 0.1; printf \\e[?5l; 
		read -s -n1 -t1 && break; 
	 done;
}

E_RGB=$'\e[0;36m'         # RGB
rgb() { ## Many colors
  echo -e "\e[0;38;2;123;132;123m AA"
	echo -e "\e[0;38;2;123;132;240m AA"
	echo -e "\e[0;38;2;12;13;10m AA"
}

##N- Read tests

readstr() {  ## Test string read from cmdline
  x=$(bpRead "Enter a string" "Default value" )
  echo "You entered \"$x\""
  x=$(bpRead "Just press enter" "Default value" )
  echo "You entered \"$x\""
}

readint() {  ## Test integer read from cmdline
  x=$(bpReadInt "Enter value" "12" "0" "100")
  echo "You entered \"$x\""
  x=$(bpReadInt "Just press enter" "45" "0" "100")
  echo "You entered \"$x\""
}

readyn() { ## Test Yes/No question from cmdline 
  if bpReadY "Default yes"; then
    echo "YES"
  else
    echo "NO"
  fi

  if bpReadN "Default no"; then
    echo "YES"
  else
    echo "NO"
  fi
}


##N- Experiments

bpShow() {
  for a in {1..6}; do 
	  echo -e "${E_RED}$1${E_END}"
		sleep 0.3
		echo -e "${E_UP}${E_RETURN}"
		echo -e "${E_BR_RED}$1${E_END}"
		sleep 0.3
		echo -e "${E_UP}${E_RETURN}"
#		echo -e "${E_RETURN}"
				
	done
}

blink() { ## Test
  bpShow "Blinking message"
}


listfiles() { ## list files
  for file in ./*
	do
	  echo $file
	  if [ -L $file ]; then
		echo "A"
		else
		echo "B"
		fi
	done
}

#
# $1 Number of iterations
# $2 Command to execute
#
bpRepeat() { ##D Repeat command n times
 local i max
 max=$1; shift;
 for ((i=1; i <= max ; i++)); do  # --> C-like syntax
   eval "$@";
 done

}

repeat() { ## Test repeat 
  bpRepeat 10 "ls ; sleep 1"
}


#
# $1 Text to set as title
#
bpTitle() { ##D Set terminal window title
  case "$TERM" in
    *term* | rxvt)
	    echo -en  "\e]0;$*\a" ;;
	  *)  ;;
  esac
}

title() { ## Set title
  bpTitle "Kalle"
	bpWait 10
}

bpDo() { ##D Execute command
  if $1 ; then
	  bpOk "Ok"
	else
	  bpError "Command $1 failed"
	fi
	
}

ex() { ## Ex
  bpDo ls
	bpDo sl
}
		 
fileTest() { ## Test colorization of filename
  F="/use/local/var/log/messages"
  echo -n "The filename $(bpColorizeFile $F) is colorized."
}

#
# String contains
# 
# $1 Substring to search
# $2 String to search in
#
bpInString() {

  if [[ "$1" = *"$2"* ]]; then
    echo 1
  else
    echo 0
  fi  
}

inString() { ## String contains test
  A="Hello world"
  
  if [ "$( bpInString HelloX "$A" )" = "1" ]; then
#  if  $( bpInString "Hello" "$A" ) ; then
    echo "A"
  else
    echo "B"
  fi
  
  bpInString "Hello" "$A"
  bpInString "Kalle" "$A" 
}

arg() { ##A Integer argument test
  bpTextLine "Integer argument"
}

opttest() { ## Options testing
  echo "$1" "$2" "$3" 
  echo "$*"
  bpTextLine "Option testing"
  while getopts ":a:" opt; do
  echo "$opt"
    case $opt in
      a)
        echo "-a was triggered, Parameter: $OPTARG" >&2
      ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
    ;;
    esac
  done

}


aVeryLongCommandTestCommand() { ## Testing truncation of long command strings
  echo
}

#ICMD=10
inactiveCommand() { ##CV ICMD Inactive command test
  echo "Only possible if ICMD is set."
}




# Directory where to store archives
ARCHIVEDIR="archive"
BACKUP_DIR="backup"
OUTDIR="output"
BUILDDIR="build"

#TARGET="kalle"
#
# Archive makeplate project
#
# $1 Target name
# 
archive() { ## Make a tar archive of the source code
  DT=$(date +"%Y%m%d-%H%M%S")
  bpMkDir ${ARCHIVEDIR}
  tar -cvzf "${ARCHIVEDIR}/${1}_${DT}.tar.gz" ./*  \
    --exclude=${ARCHIVEDIR} \
    --exclude=${BACKUP_DIR} \
    --exclude=${OUTDIR}     \
    --exclude=${BUILDDIR}   \
    --exclude='*.a'      \
    --exclude='*.o'      \
    --exclude='*.ko'     \
    --exclude='*.obj'    \
    --exclude='*.a'      \
    --exclude='*.la'     \
    --exclude='*.lo'     \
    --exclude='*.slo'    \
    --exclude='*.lib'    \
    --exclude='*.so'     \
    --exclude='*.so*'    \
    --exclude='.dep'     \
    --exclude='.svn'     \
    --exclude='.git'     \
    --exclude='*.elf'    \
    --exclude='*.hex'    \
    --exclude='*.bin'    \
    --exclude='*.exe'    \
    --exclude='*.sym'    \
    --exclude='*.lss'    \
    --exclude='*.map'    \
    --exclude='*.app'    \
    --exclude='*.i*86'   \
    --exclude='*.x86_64' \
    --exclude='*~'       \
    --exclude="*.old"    \
    --exclude="*.tmp"    
}



# Max number of backups
BACKUPS=100

backup() { ## Make an incremental backup
  bpMkDir ${BACKUP_DIR}
  # remove oldest backup
  bpRm  ${BACKUP_DIR}/backup_${BACKUPS}
  # rotate backups 
  for ((x=BACKUPS;x>0;x--)); do                 
    bdir=${BACKUP_DIR}/backup_$(( x - 1 )) ;    
    # check if directory exist before renameing  it 
    if [ -d ${bdir} ]; then                        
      mv -f ${bdir}  ${BACKUP_DIR}/backup_${x} ;  
    fi ;                                            
  done 
  rsync --archive                 \
        --delete                  \
        --relative                \
        --exclude=${BACKUP_DIR}   \
        --exclude=${ARCHIVEDIR}   \
        --exclude=${OUTDIR}       \
        --link-dest="${PWD}/${BACKUP_DIR}/backup_1" \
        .                      \
        ${BACKUP_DIR}/backup_0 
}

#XXX=-e 's/[0-9]*/\\${BP_C_VALUE}&\\${E_END}/' \


f() { ## Create an error
  false
}

##N- BASH Documentation

vars() { ## Vars
  #echo
	bpTextLine "Conditions"
	
	bpPrintInfo "[ -z STRING ]" "Empty string"
	bpPrintInfo "[ -n STRING ]" "Not empty string"
	bpPrintInfo "[ NUM -eq NUM ]" "Equal"
	bpPrintInfo "[ NUM -ne NUM ]" "Not equal"
	bpPrintInfo "[ NUM -lt NUM ]" "Less than"
	bpPrintInfo "[ NUM -le NUM ]" "Less than or equal"
	bpPrintInfo "[ NUM -gt NUM ]" "Greater than"
	bpPrintInfo "[ NUM -ge NUM ]" "Greater than or equal"
	bpPrintInfo "[[ STRING =~ STRING ]]" "Regexp"
	bpPrintInfo "(( NUM < NUM ))" "Numeric conditions"
	bpPrintInfo "[ -o noclobber ]" "If OPTIONNAME is enabled"
	bpPrintInfo "[ ! EXPR ]" "Not"
	bpPrintInfo "[ X ] && [ Y ]" "And"
	bpPrintInfo "[ X ] || [ Y ]" "Or"
	
	bpTextLine "File conditions"
  bpPrintInfo "[ -e FILE ]" "File exists"
	bpPrintInfo "[ -f FILE ]" "Is regular file"
	bpPrintInfo "[ -d FILE ]" "Is directory"
	bpPrintInfo "[ -h FILE ]" "Is symlink"
	bpPrintInfo "[ -r FILE ]" "Is readble"
	bpPrintInfo "[ -w FILE ]" "Is writable"
	bpPrintInfo "[ -x FILE ]" "Is executable"
	bpPrintInfo "[ -s FILE ]" "Size>0"
	
	bpPrintInfo "[ -S FILE ]" "Is socket"
	bpPrintInfo "[ -g FILE ]" "sgid bit set"
	bpPrintInfo "[ -u FILE ]" "suid bit set"

  bpPrintInfo "[ FILE1 -nt FILE2 ]" "1 is more recent than 2"
	bpPrintInfo "[ FILE1 -ot FILE2 ]" "2 is more recent than 1"
	bpPrintInfo "[ FILE1 -ef FILE2 ]" "Same files"

  bpTextLine "Arguments"
  bpPrintInfo '$#' "Number of arguments"
  bpPrintInfo '$*' "All arguments"
  bpPrintInfo '$@' "All arguments, starting from first"
  bpPrintInfo '$1' "First argument"

  bpPrintInfo '$?' "Exit status of last task"
	bpPrintInfo '$!' "PID of last background task"
	bpPrintInfo '$$' "PID of shell"

  bpLine
}


#---------------------------------------------------------------------
# Bashplate settings
#---------------------------------------------------------------------

bpInitSettings() { 

##V Script version info
VERSION="1.05"

##V Bashplate version
BPVERSION="1.11"

##V Usage info
USAGE="Usage: ${BPSCRIPTNAME} command [option]"

# Description text
DESC="This script demonstrates some of the features of the bashplate template."

##V logfile (uncomment to use logfile)
LOGFILE=${BPSCRIPTPATH}/${BPSCRIPTNAME}.log

##V Logging options (uncomment to activate logging parameters)
LOG_OK=1
LOG_INFO=1
LOG_WARNING=1
LOG_ERROR=1
LOG_CRITICAL=1

##V Lock file (uncomment to use lock file feature )
LOCK_FILE=/tmp/${BPSCRIPTNAME}.lock

# Activate settings function (will create settings file when run)
BPSETTINGS=1

bpSettingsDir=~/.config/bashplates
bpSettingsFile=${bpSettingsDir}/bashplates.conf

# Create settings file if non existent
#CREATEPLSETTINGS=1

}
#---------------------------------------------------------------------
# Bashplate Hooks
#---------------------------------------------------------------------

##V Default command (uncomment to use a default command )
DEFAULTCMD=help

##V Pre script hook, execute this function before every command
#PREHOOK=

##V Post script hook, execute this function after every command
#POSTHOOK=

##V Function to be executed before every other cmd except DEFAULT function
PRECMDHOOK=preCmdHook

##V Function to be executed after every other function except DEFAULT function
POSTCMDHOOK=postCmdHook

##V Function to be executed after information command
INFOHOOK=infoHook

#---------------------------------------------------------------------
# Signal traps
#---------------------------------------------------------------------

signalInt() {
  if [ -n "$TRAPTEST" ]; then
    echo
    bpOk "This text is printed from signal \"trap\" sigint."
  fi
  bpCleanUp
  exit "$BP_E_OK"
}

signalHup() {
  bpCleanUp
}

signalQuit() {
  echo "Quit"
  bpCleanUp
}

signalTerm() {
  echo "Term"
  bpCleanUp
}

signalErr() {
  echo
  echo
  bpError "Trace error Row: $2  Function: $1"
	echo
	bpCallStack
	bpExit 1
}

signalDbg() {
  echo "Debug Row: $2  Function: $1"
}

##CN- IHELP Exit and cleanup

bpCallStack() { ##D Print out BASH call stack
  bpTextLine "Call stack"
	echo
  local frame=0
	while caller $frame | sed -r -e "s/[0-9]*/${BP_C_VALUE}&${E_END}/"   ; do
	  ((frame++));
	done
	echo "$*"
	bpLine
}

bpCleanUp() { ##D Cleanup function
  rm -f "$LOCK_FILE"    # remove Lock file
  echo -e "${E_SHOW}"     # Turn on cursor if turned of
}

#
# $1 exit code, if not given exit code is 0=SUCCESS
#
bpExit() { ##D Function for safely exiting script
  bpCleanUp

  # execute postscript hook if existing
  if [ -n "$POSTHOOK" ]; then
     ${POSTHOOK}
  fi

  # Check if argument is given
  if [ -z "$1" ]; then
    exit 0   # Success
  else
    exit "$1"
  fi

}

bpErrorExit() {  ##D Safely exit script with a error
  bpError "${1}"
  bpCleanUp
  exit 1
}

#---------------------------------------------------------------------
# Terminal codes
#---------------------------------------------------------------------

# ANSI foreground colors codes
#
E_BLACK=$'\e[0;30m'        # Black
E_RED=$'\e[0;31m'          # Red
E_GREEN=$'\e[0;32m'        # Green
E_YELLOW=$'\e[0;33m'       # Yellow
E_BLUE=$'\e[0;34m'         # Blue
E_MAGENTA=$'\e[0;35m'      # Magenta
E_CYAN=$'\e[0;36m'         # Cyan
E_GRAY=$'\e[0;37m'         # Gray
E_DARKGRAY=$'\e[1;30m'     # Dark Gray
E_BR_RED=$'\e[1;31m'       # Bright Red
E_BR_GREEN=$'\e[1;32m'     # Bright Green
E_BR_YELLOW=$'\e[1;33m'    # Bright Yellow
E_BR_BLUE=$'\e[1;34m'      # Bright Blue
E_BR_MAGENTA=$'\e[1;35m'   # Bright Magenta
E_BR_CYAN=$'\e[1;36m'      # Bright Cyan
E_WHITE=$'\e[1;37m'        # White

# ANSI background color codes
#
E_ON_BLACK=$'\e[40m'       # Black
E_ON_RED=$'\e[41m'         # Red
E_ON_GREEN=$'\e[42m'       # Green
E_ON_YELLOW=$'\e[43m'      # Yellow
E_ON_BLUE=$'\e[44m'        # Blue
E_ON_MAGENTA=$'\e[45m'     # Magenta
E_ON_CYAN=$'\e[46m'        # Cyan
E_ON_WHITE=$'\e[47m'       # White

# ANSI Text attributes
E_ATTR_BOLD=$'\e[1m'
E_ATTR_LOWI=$'\e[2m'
E_ATTR_UNDERLINE=$'\e[4m'
E_ATTR_BLINK=$'\e[5m'
E_ATTR_REVERSE=$'\e[7m'

# ANSI cursor operations
#
E_RETURN=$'\e[F'           # Move cursor to begining of line
E_UP=$'\e[A'               # Move cursor one line up
E_DOWN=$'\e[B'             # Move cursor one line down
E_FORWARD=$'\e[C'          # Move cursor forward
E_BACK=$'\e[D'             # Move cursor backward
E_HIDE=$'\e[?25l'          # Hide cursor
E_SHOW=$'\e[?25h'          # Show cursor

E_END=$'\e[m'              # Clear Attributes

# Default Bashplate colortheme
BP_C_OK=$E_BR_GREEN
BP_C_INFO=$E_BR_CYAN
BP_C_WARNING=$E_BR_YELLOW
BP_C_ERROR=$E_BR_RED
BP_C_CRITICAL=$E_ON_RED$E_WHITE
BP_C_LINE=$E_DARKGRAY
BP_C_LINE_TEXT=$E_YELLOW
BP_C_DESCRIPTION=$E_GREEN
BP_C_ID=$E_CYAN
BP_C_FILENAME=$E_BR_GREEN
BP_C_PATH=$E_GREEN

# Shellscript colorize colors
BP_C_RESERVED=$E_RED
BP_C_COMMENT=$E_CYAN
BP_C_STRING=$E_GREEN
BP_C_VALUE=$E_BR_YELLOW
BP_C_VAR=$E_BR_YELLOW

# Exit codes
#
BP_E_OK=0            # successful termination

#---------------------------------------------------------------------
# Bashplate internal functions
#---------------------------------------------------------------------

##CN- IHELP Printing functions

# Print text with row
#
# arg1 text to be printed
# arg2 text color
# arg3 line color
# arg4 middle character
# arg5 line character
#
bpPrintLineC() { ##D Print text with adjusted line after with selectable colors
  len1="${#1}"
  len4="${#4}"

  echo -en "${2}${1}${4}${3}"
  l=$((BPCOLUMNS - len1 - len4 - 3 ))
  seq -s"${5}" "${l}"|tr -d '[:digit:]'
  echo -en ${E_END} 
}

# Print text with row
#
# arg1 text to be printed
# arg2 text color
# arg3 line color
#
bpTextLineC() { ##D Print text with adjusted line after with selectable colors
  bpPrintLineC "$1" "$2" "$3" " " "-"
}

bpTextLine() { ##D Print text with line after
  bpTextLineC "$1" "${BP_C_LINE_TEXT}" "${BP_C_LINE}"
}

# Print a divider row
#
bpLine() { ##D Print a line
  bpPrintLineC "" "${BP_C_LINE}" "${BP_C_LINE}" "" "-"
}

# Legacy function (do not use in new applications)
#
printLine() {
  bpLine
}

# Generic command/description printout function
# 
# $1 command color
# $2 description color
# $3 command text
# $4 desccription text
#
bpPrintInfoGeneric() {
  printf "${1}  %-24.24s${E_END} ${2}%s${E_END}\n" "$3" "$4"
}


# Print text into two columns
#
# arg1 text for column 1
# arg2 text for column 2
#
bpPrintInfo() {
  bpPrintInfoGeneric "${BP_C_ID}" "${BP_C_DESCRIPTION}" "$1" "$2"
}

bpPrintInfoAlt() {
  bpPrintInfoGeneric "${E_DARKGRAY}" "${BP_C_DESCRIPTION}" "$1" "$2"
}

# Print a variable + text into two columns
#
# $1 variable for column 1
# $2 text for column 2
# $3 optional text form column 1
#
bpPrintVar() {
  var="$1"      
  if [ "${!var}" ]; then
    if [ ! -z "$3" ]; then
      X=${3}
    else 
      X="${!var}"
    fi
    bpPrintInfo "$2" "${X}"
  else
    printf "${BP_C_ID}  %-24s${E_END} ${E_RED}N/A${E_END}\n" "$2"
  fi
}


# Colorize string with filename
#
# $1 string with filename to colorize
# ret colorized string
#
bpColorizeFile() { ##D Colorize string with filename
  if [ ! -z "$1" ]; then
    echo "${BP_C_PATH}$(dirname "$1")/${BP_C_FILENAME}$(basename "$1")${E_END}"
  fi
}


#
# $1 string to be filtered
#
bpFilterEscape() { ##D Filter escape characters from string
  echo "$1" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
}
  

##CN- IHELP File operations

#
# $1 directory to change to
#
bpCd() { ##D Safe cd function (exits on fail)
  cd "$1" || bpExit "Failed to cd to [$1]"
}

# Create a directory if it does not exist
#
# $1 Directory to be created
#
bpMkDir() { ##D Create directory
  if [ ! -d "$1" ]; then
    bpInfo "Creating directory \"${1}\""
    mkdir -p "$1"
  fi
}

#
# $1 
# $2
#
bpLn() { ##D Create symbolic link
  bpInfo "Creating link \"${2}\""
  if [ ! -L "$1" ]; then
    ln -s "${1}" "${2}"
  fi
}

# 
# Copy file(s)
# 
# $1 file(s) to be copied
# $2 destination
#
bpCp() { ##D Copy file(s)
  bpInfo "Copying \"${1}\" to \"${2}\""
  cp -rf "$@"
}

#
# Move file(s)
#
# $1 file(s) to be moved
# $2 destination
bpMv() { ##D Move file(s)
  bpInfo "Moving file \"${1}\" \"${2}\""
  mv "$1" "$2"
}

# 
# Remove file(s)
# 
# $1 file(s) to be removed
#
bpRm() { ##D Remove file
  bpInfo "Removing file \"${1}\""
  rm -rf "${1}"
}

# Replace text in file
#
# $1 file 
# $2 text to replace
# $3 new text
#
bpReplace() {  ##D Replace text in file
  sed -i -e "s/${2}/${3}/g"  "$1"
}

# Replace entire line matching pattern
#
# $1 file 
# $2 pattern matching line
# $3 new text
#
bpReplaceLine() {  ##D Replace entire line in file
  sed -i -e "0,/${2}/s/${2}.*/${3}/" "${1}"
}

# Appends a line to a file if it is not present in that file.
#
# $1 file
# $2 line to append
#
bpAppendIfNoSuchLine() { ##D Append a line if it does not exist in file
  grep -q -F "$2" "$1" || echo "$2" >> "$1"
}

# Remove line in file containing a given string
#
# $1 file
# $2 string
#
bpRemoveLineContaining() { ##D Remove line in file if it contains given string
  grep -v "$2" "$1" > "${1}_tmp"
  mv -f "${1}_tmp" "${1}"
}

#
# Check if string exists in file
#
# $1 file
# $2 string
# return 1 for true, 0 for false
#
bpStrExist() { ##D Check if string exist in file
  
  if grep -q -F "$2" "$1" ; then
    echo "1"
  else
    echo "0"
  fi
}

##CN- IHELP Input

#
# Read string from commandline
#
# $1  Question string
# $2  Default value
# return string read from cmdline/default if enter pressed
#
bpRead() { ##D Read from commandline

  if [ "${2}" == "" ]; then
    read -erp "${1} >" result
  else
    read -erp "${1} [$2] >" result
    if [ "${result}" == "" ]; then
      result="${2}"
    fi
  fi

  echo "${result}"
}

#
# Read integer from commandline
#
# $1  Question string
# $2  Default value
# $3  min value
# $4  max value
# return integer read from cmdline/default if enter pressed
#
bpReadInt() { ##D Read integer from commandline
  while true; do
    if [ "${2}" == "" ]; then
      read -erp "${1} ($3-$4) >" result
      if [ "${result}" == "" ]; then
        result=$(($3 - 1))
      fi
    else
      read -erp "${1} ($3-$4) [$2] >" result
      if [ "${result}" == "" ]; then
        result="${2}"
      fi
    fi
    if [ $((result)) -ge "$3" ] && [ $((result)) -le "$4" ]; then
      break
    fi
  done
  echo "${result}"
}


#
# $1 question text
# $2 default answer 0 = yes, 1 = no
# return 0 = Yes, 1=No
#
bpReadYN() {  ##D Ask yes/no question generic 
  while true; do
  
    if [ "$2" -eq 1 ]; then 
      yn=$( bpRead "${1} [y/N]" )      
    else
      yn=$( bpRead "${1} [Y/n]" )
    fi
  
    case "$yn" in
      [Yy]* ) return 0;  break;;
      [Nn]* ) return 1;  break;;
      ""    ) return "$2"; break;;
      * ) echo "Please answer yes or no.";;
    esac
  done
}

#
# $1 Question text
# return 0 = Yes, 1=No
#
bpReadY() { ##D Ask yes/no question default yes
  bpReadYN "$1" 0
  return $?
}

#
# $1 Question text
# return 0 = Yes, 1=No
#
bpReadN() { ##D Ask yes/no question default no
  bpReadYN "$1" 1
  return $?
}


#---------------------------------------------------------------------
#
#---------------------------------------------------------------------

# Settings file ------------------------------------------------------

##CN- BPSETTINGS Settings

bpAddSetting() { 

  # Check if setting exist in file
  S=$(bpStrExist "${1}" "${2}" )

  if [ "${S}" == "0" ]; then
    {
      echo "# ${4}" 
      echo "${2}=\"${3}\"" 
      echo 
    } >> "${1}"
  fi
}

bpAddSettings() { 
  bpAddSetting $bpSettingsFile "BP_NAME"    "John Doe"        "Name of user"
  bpAddSetting $bpSettingsFile "BP_EMAIL"   "JohnDoe@foo.bar" "Email of user"
  bpAddSetting $bpSettingsFile "BP_EDITOR"  "vi"              "Default editor"
  bpAddSetting $bpSettingsFile "BP_LICENSE" "MIT"             "Default project license"
  bpAddSetting $bpSettingsFile "BP_ORG"     "ACME"            "Default organisation"
}

# Change setting in config file (key value pair)
#
# arg1 config file
# arg2 setting to change
# arg3 new value for setting
#
bpChSetting() {  
  SETTING="$2"
  VAL="$3"
  
  S=$(bpStrExist "${1}" "${2}" )
  if [ "${S}" == "0" ]; then
    bpAddSettings
  fi
  sed -i "s/^\(${SETTING}\s*=\s*\).*\$/\1$VAL/" "$1"
}

bpCreateSettings() {
  echo "Creating new bashplates settings file. ${bpSettingsFile}"
  bpMkDir ${bpSettingsDir}
          
  echo "# " >> ${bpSettingsFile}
  echo "# Bashplates common settings" > ${bpSettingsFile}
  echo "# " >> ${bpSettingsFile}
  echo      >> ${bpSettingsFile}

  bpAddSettings
}

bpLoadSettings() {
  if [ -n "${bpSettingsFile}" ]; then
    if [ -e "${bpSettingsFile}" ]; then
      source "${bpSettingsFile}"
    else
      bpCreateSettings
      source "${bpSettingsFile}"
    fi
  fi
}

printSettings() { ##C BPSETTINGS Print plate information
  bpTextLine "Bashplates settings"
  bpPrintVar BP_NAME      "Name:"
  bpPrintVar BP_EMAIL     "Email:"
  bpPrintVar BP_LICENSE   "Default license:"
  bpPrintVar BP_EDITOR    "Default editor"
  bpPrintVar BP_ORG       "Default organisation"
  bpLine
}

setname() { ##C BPSETTINGS Set name
  bpChSetting "${bpSettingsFile}" "BP_NAME" "\"${2}\""  
}

setemail() { ##C BPSETTINGS Set email address
  bpChSetting "${bpSettingsFile}" "BP_EMAIL" "\"${2}\""  
}

seteditor() { ##C BPSETTINGS Set default editor
  bpChSetting "${bpSettingsFile}" "BP_EDITOR" "\"${2}\""  
}

setlic() { ##C BPSETTINGS Set default license
  bpChSetting "${bpSettingsFile}" "BP_LICENSE" "\"${2}\""  
}

setorg() { ##C BPSETTINGS Set default organisation
  bpChSetting "${bpSettingsFile}" "BP_ORG" "\"${2}\""  
}


##-

# Logging ---------------------------------------------------------

##CN- IHELP Log functions

#
# Function logging to file
#
# Arg1 String to log to file
#
bpLog() { ##D Log to file command
  # check for LOGFILE variable
  if [ -n "$LOGFILE" ]; then
    ts=$(date +"%Y-%m-%d %H:%M:%S")
    bpFilterEscape "$ts $1"  >> "${LOGFILE}"
  fi
}

bpLogOk() { ##D Log Ok message to file
  bpLog "[ Ok ] $1"
}

bpLogInfo() {  ##D Log Info message to file
  bpLog "[Info] $1"
}

bpLogWarning() {  ##D Log Warning message to file
  bpLog "[Warn] $1"
}

bpLogError() {  ##D Log Error message to file
  bpLog "[Erro] $1"
}

bpLogCritical() {  ##D Log Critical message to file
  bpLog "[Crit] $1"
}

log() { ##C LOGFILE View logfile
  if [ -n "$LOGFILE" ]; then
    if [ -f "${LOGFILE}" ]; then  # Check that logfile exists
      D=$(sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_END}\]|"  \
            -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_END}\]|"  \
            -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_END}\]|"    \
            -e "s|\[ Ok \]|\[\\${BP_C_OK} Ok \\${E_END}\]|"    \
            -e "s/[-0-9]+/\\${E_GREEN}&\\${E_END}/1"            \
            -e "s/[:0-9]+/\\${E_BR_GREEN}&\\${E_END}/6"            \
            -e "s|\[Crit\]|\[\\${E_ON_RED}\\${E_WHITE}Crit\\${E_END}\]|" < "${LOGFILE}" )

      echo -e "$D"
    fi
  else
    bpInfo "Logging is not activated"
    bpExit
  fi
}

mlog() {   ##C LOGFILE Monitor logfile
  if [ -n "$LOGFILE" ]; then
    if [ -f "${LOGFILE}" ]; then  # Check that logfile exists
      tail -f "${LOGFILE}" | sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_END}\]|"  \
            -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_END}\]|"  \
            -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_END}\]|"    \
            -e "s|\[ Ok \]|\[\\${BP_C_OK}Erro\\${E_END}\]|"    \
            -e "s/[-0-9]+/\\${E_GREEN}&\\${E_END}/1"            \
            -e "s/[:0-9]+/\\${E_BR_GREEN}&\\${E_END}/6"            \
            -e "s|\[Crit\]|\[\\${E_ON_RED}\\${E_WHITE}Crit\\${E_END}\]|"

    fi
  else
    bpInfo "Logging is not activated"
    bpExit
  fi
}

##CN- IHELP Message

bpOk() { ##D Success message
  if [ -n "$LOG_OK" ]; then
    bpLogOk "$1"
  fi  
  echo -e "[${BP_C_OK}Ok${E_END}] $1"
}

bpInfo() { ##D Info message
  if [ -n "$LOG_INFO" ]; then
    bpLogInfo "$1"
  fi
  echo -e "[${BP_C_INFO}Info${E_END}] $1"
}

bpWarning() { ##D Warning message
  if [ -n "$LOG_WARNING" ]; then
    bpLogWarning "$1"
  fi
  echo -e "[${BP_C_WARNING}Warning${E_END}] $1"
}

bpError() { ##D Error message
  if [ -n "$LOG_ERROR" ]; then
    bpLogError "$1"
  fi
  echo -e "[${BP_C_ERROR}Error${E_END}] $1"
}

bpCritical() { ##D Critical error message
  if [ -n "$LOG_CRITICAL" ]; then
    bpLogCritical "$1"
  fi
  echo -e "[${BP_C_CRITICAL}Critical${E_END}] $1"
  bpExit
}

# Various  ---------------------------------------------------------

##CN- IHELP Assert

bpAssertRoot() { ##D Assert that user is root
  if [ "$(whoami)" != root ]; then
    bpError "Must be root to use this command."
    bpExit "1"
  fi
}

bpAssertNoLockFile() { ##D Assert that lockfile is not present
  if [ -n "$LOCK_FILE" ]; then
    if [ -f "$LOCK_FILE" ]; then
      bpError "Script is already running. (${LOCK_FILE})"
      exit  "1" # do not use bpExit because lock file belongs to prexsisting process
    fi
    touch "$LOCK_FILE"
  fi
}

bpAssertRequiredProgs() { # Assert that required programs are available on the system (deprecated)
  bpAssertProgs "${REQUIRED_PROGRAMS[@]}"
}

#
# $1 string list of programs that are required
#
bpAssertProgs() { ##D Assert that required programs are available on the system
  things=("$@")
  e=0
  for thing in "${things[@]}" ;do
    hash "$thing" 2>&- || \
      { bpError "Required program \"$thing\" not found."; e=1; }
  done
  if [ $e -eq 1 ]; then
    bpExit 1
  fi
}

##CN- IHELP Debug/Controll

icheck() { ##D Make a shellcheck
  bpAssertProgs "shellcheck"
  shellcheck "$0"
}

irt() { ##D Remove tabs from script
  sed -i -e 's/\t/  /g' "${BPSCRIPTPATH}/${BPSCRIPTNAME}"
}

##CN- IHELP Help & info

printCommand() {
  help_line=$1
  help_command=$(echo "$help_line" | sed -s 's/(.*//')
  help_info=$(echo "$help_line" | sed -s 's/^.*'"$2"'//')
  bpPrintInfo "$help_command" "$help_info"
}

printCondCommand() {
  help_line="$1"
  C=$(echo "$1" | sed -s 's/^.*##C//' | awk '{print $1}')
  eval "D=\$$C"
  if [ -n "$D" ]; then
    help_command=$(echo "$help_line" | sed -s 's/(.*//')
    help_info=$(echo "$help_line" | sed -s 's/^.*'"$C"'//')
    bpPrintInfo "$help_command" "$help_info"
  fi
}

printCondCommandV() {
  help_line="$1"
  C=$(echo "$1" | sed -s 's/^.*##CV//' | awk '{print $1}')
  
  eval "D=\$$C"
  
  help_command=$(echo "$help_line" | sed -s 's/(.*//')
  help_info=$(echo "$help_line" | sed -s 's/^.*'"$C"'//')

  if [ -n "$D" ]; then
    bpPrintInfo "$help_command" "$help_info"
  else
    bpPrintInfoAlt "$help_command" "$help_info"
  fi
}

printCondLine() {
  help_line="$1"
  C=$(echo "$1" | sed -s 's/^.*##C-//' | awk '{print $1}')
  eval "D=\$$C"
  if [ -n "$D" ]; then
     bpLine
  fi
}

printNamedLine() {
  name=$(echo "$1" | sed -e 's/^.*##N-//' -e 's/^[ \t]*//' )
  bpTextLine "$name"
}

printCondNamedLine() {
  help_line="$1"
  C=$(echo "$1" | sed -s 's/^.*##CN-//' | awk '{print $1}')
  name=$(echo "$help_line" | sed -e 's/^.*'"$C"'//' -e 's/^[ \t]*//' )
  eval "D=\$$C"
  if [ -n "$D" ]; then
    bpTextLine "$name"
  fi
}

help() { ## Print this help information
  echo "$USAGE"
  echo -e "$DESC"
  echo 
  IFS=$'\n'
  SC="$1"
  help_lines=$(grep -h '##' "$0" | grep -v -e 'grep' -e '##D' -e '##V' -e '\*##C' -e '\*##C-' -e '\"##' -e '##N-//' -e 'help_line' -e 'printLine')
  for help_line in ${help_lines} ; do
    case "$help_line" in
      *"##-"*)   bpLine ;;
      *"##C-"*)  printCondLine       "$help_line" ;;
      *"##N-"*)  printNamedLine      "$help_line" ;;
      *"##CN-"*) printCondNamedLine  "$help_line" ;;
      *"##CV"*)  printCondCommandV    "$help_line" ;;
      *"##C"*)   printCondCommand    "$help_line" ;;
#      *"##A"*)   echo "Int arg"      ;;
      *"##"*)    printCommand        "$help_line" '##' ;;
      *)
      ;;
    esac
  done
}

ihelp() { ##D Print internal help information  

  # Singe command documentation
  if [ "$2" != "" ]; then
    echo
    bpTextLine "$2"
    echo
    grep --no-filename -B 10 "$0" -e "${2}()" | grep "#" | grep -v "##"
    bpLine
    bpExit
  fi

  IFS=$'\n'
  SC="$1"

#  bpLine
  IHELP=1    # Force ihelp documentations
  LOGFILE=1  # Force log documentation

  help_lines=$(grep -h '##' "$0" | grep -v -e 'grep' -e '\*"##[ A-Z]"\*' -e 'help_line' -e ' printLine' -e 'awk' -e 'bpPrintInfo')
  for help_line in ${help_lines} ; do
    case "$help_line" in
#      "##-")    bpLine ;;
      *"##D"*)  printCommand  "$help_line" '##D' ;;
      *"##C-"*) printCondLine "$help_line" ;;
      *"##CN-"*) printCondNamedLine  "$help_line" ;;
      *"##C"*)   printCondCommand  "$help_line" ;;
      *)
      ;;
    esac
  done

  bpTextLine "Comments"
  bpPrintInfo "#" "Normal bash comment"
  bpPrintInfo "##" "Subcommand information comment (shown with help)"
  bpPrintInfo "##C" "Conditional subcommand comment (shown with help)"
  bpPrintInfo "##-" "Separator line (shown with help)"
  bpPrintInfo "##C-" "Conditional separator line (shown with help)"
  bpPrintInfo "##N-" "Named separator line (shown with help)"
  bpPrintInfo "##CN-" "Conditional named separator line (shown with help)"
  bpPrintInfo "##D" "Internal function comment (shown ihelp)"
  bpLine
}

iinfo() { ##D Show information about script
  bpTextLine "Script information"
  bpPrintVar "BPSCRIPTNAME"    "Script" "$( bpColorizeFile "${BPSCRIPTPATH}/${BPSCRIPTNAME}" )"
  bpPrintVar "VERSION"         "Script version" 
  bpPrintVar "BPVERSION"       "Template version"
  bpPrintVar "bpSettingsFile"  "Bashplate settings file" "$( bpColorizeFile ${bpSettingsFile} )"
  bpPrintVar "LOGFILE"         "Log file"  "$( bpColorizeFile "${LOGFILE}" )"
  bpPrintVar "LOCK_FILE"       "Lock file" "$( bpColorizeFile "${LOCK_FILE}" )"
  bpPrintVar "DEFAULTCMD"      "Default function" 
  bpPrintInfo "PID" "$$"  
  bpPrintVar "BPDATE" "Date" 
  bpPrintVar "BPTIME" "Time"

  if [ -n "${INFOHOOK}" ]; then
    bpTextLine "App. information"
    ${INFOHOOK}
  fi
  printSettings
}

#
iview() {  ##D View example
#  VF='s/\$[{]?[a-zA-Z0-9_]*[}]?/'"\\${BP_C_VAR}&\\${E_END}/" 
  # Singe command documentation
  if [ "$2" != "" ]; then
    echo
    bpTextLine "$2"
    echo
    grep --no-filename -A 60  "$0" -e "${2}()" | grep -B 60 -m 1 -x "}" | \
      sed  -e "s/#.*/\\${BP_C_COMMENT}&\\${E_END}/"          \
             -e "s/\<echo\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<if\>/\\${BP_C_RESERVED}&\\${E_END}/"      \
             -e "s/\<then\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<else\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<fi\>/\\${BP_C_RESERVED}&\\${E_END}/"      \
             -e "s/\<do\>/\\${BP_C_RESERVED}&\\${E_END}/"      \
             -e "s/\<done\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<elif\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<case\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<esac\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<for\>/\\${BP_C_RESERVED}&\\${E_END}/"     \
             -e "s/\<in\>/\\${BP_C_RESERVED}&\\${E_END}/"      \
             -e "s/\<select\>/\\${BP_C_RESERVED}&\\${E_END}/"  \
             -e "s/\<time\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<until\>/\\${BP_C_RESERVED}&\\${E_END}/"   \
             -e "s/\<select\>/\\${BP_C_RESERVED}&\\${E_END}/"  \
             -e "s/\<eval\>/\\${BP_C_RESERVED}&\\${E_END}/"  \
						 -e "s/\<break\>/\\${BP_C_RESERVED}&\\${E_END}/"  \
             -e "s/\<while\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\".*\"/\\${BP_C_STRING}&\\${E_END}/"        \
             -e "s/\([^=]*\)=/${BP_C_VAR}\1\\${E_END}=/"        \
#             -e $VF
#             -e 's/\$[{]?[a-zA-Z0-9]*[}]?/XXX/'
#             -e 's/$?/'"\\${BP_C_VAR}&\\${E_END}/" \

    bpLine
    bpExit
  fi
}

ivars() { ##D Print internal variables
  bpTextLine "Script variables"
  echo
  IFS=$'\n'
  help_lines=$( grep -v -e 'help_lines' -e 'help_line' "$0" | grep -A 1 '##V'   ) # | sed "s/--//" )
  for line in ${help_lines}; do
    if [ "$line" == "--" ]; then
      echo
    else
      help_line=$(echo "${line}" | sed -u -e "s/##V[ ]/${BP_C_DESCRIPTION}/i" -e "s/^.*=/${BP_C_ID}&${E_END}/i" -e "s/=/${E_END}=/" )
      echo -e "$help_line"
      echo -en "$E_END"
  fi
  done
  echo
}

version() { ## Print version information
  echo "$VERSION"
}

# Runs a function in this file as a command
bpRunCommand() {
  if [ "$BPARGUMENTS" -eq 0 ]; then

    # check for a default command
    if [ -n "$DEFAULTCMD" ]; then
      "$DEFAULTCMD" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
      bpExit
    fi
    bpErrorExit "No command given"
  fi

  funks=$(grep "##" "$0" | grep -v grep | grep -v help_line)
  for line in ${funks}; do
    command=$(echo "$line" | sed -s 's/(.*//')
    if [ "$command" == "$1" ]; then

      # execute pre command hook  if existing
      if [ -n "$PRECMDHOOK" ]; then
        "${PRECMDHOOK}" "$command"
      fi

      # Check if command is conditional
      if [[ $( grep "${command}()" "$0" ) = *"##C"* ]]; then  

        # Check if condition is true and then execute else printout error message
        C=$( grep "${command}()" "$0"  | sed -s 's/^.*##C.//' | awk '{print $1}' )
        if [ -n "$C" ]; then
          eval "D=\$$C"

          if [ -n "$D" ]; then
            # execute command
            "${command}" "$@" 
          else
            bpError "Command \"$command\" not available right now."
          fi
        else
          bpError "Command \"$command\" is conditional, but is missing conditional variable"
        fi
      else 
        # command is not conditional, execute
        "${command}" "$@"
      fi

      # execute post command hook  if existing
      if [ -n "$POSTCMDHOOK" ]; then
        "${POSTCMDHOOK}" "$command"
      fi      
      bpExit
    fi
  done
  bpErrorExit "Command \"$1\" not found"
}

#---------------------------------------------------------------------
# Initiate internal variables
#---------------------------------------------------------------------

##V Directory where script is located
BPSCRIPTPATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

##V Name of script
BPSCRIPTNAME=$(basename "$0")

##V Number of arguments given to script
BPARGUMENTS=$#

##V Current date
BPDATE=$(date +"%Y-%m-%d")

##V Current time
BPTIME=$(date +"%H:%M:%S")

##V Number of columns in terminal
BPCOLUMNS=$(tput cols)

##V Number of lines in terminal
BPLINES=$(tput lines)


# Initiate bashplate settings
bpInitSettings


#---------------------------------------------------------------------
# Setup signal traps
#---------------------------------------------------------------------

trap  signalQuit SIGQUIT
trap  signalInt  SIGINT
trap  signalHup  SIGHUP
trap  signalTerm SIGTERM
trap  'signalErr ${FUNCNAME} ${LINENO}' ERR

#trap  'signalDbg ${FUNCNAME} ${LINENO}' DEBUG

#---------------------------------------------------------------------
# Load settings and execute script handler
#---------------------------------------------------------------------

# Load configuration file settings
bpLoadSettings

# execute prescript hook if existing
if [ -n "$PREHOOK" ]; then
  ${PREHOOK} "$@"
fi

# Run command parser
bpRunCommand "$@"

# Exit cleanly
bpExit

##-
