#!/bin/bash
#---------------------------------------------------------------------
#
#  Bashplate example script.
#  
#
#  Author: Peter Malmberg <peter.malmberg@gmail.com>
#
#---------------------------------------------------------------------
#

# Directory where script is located
BASEDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

#---------------------------------------------------------------------
# User Settings
#---------------------------------------------------------------------

# Script version info
VERSION="example 1.03"

# Usage info
USAGE="Usage: example command [option]" 

# Description
DESC="Bashplate is a bash script template to ease development of\n\
command style shellscripts"

# logfile (uncomment to use logfile)
LOGFILE=${BASEDIR}/example.log

# Default command (uncomment to use a default command )
#DEFAULT=funk1

#---------------------------------------------------------------------
# User functions
#---------------------------------------------------------------------

errorTest() { ## Test of error messages
  echo $LOGFILE
	bpInfo "Info test"
  bpWarning "Warning test"
	bpError "Error test"
	bpCritical "Critical test"
}

info() { # Display rows and columns
  echo $LINES
	echo "Columns: ${COLUMNS}"
}

print_bar() {
  echo -n " ["
	for jx in `seq 1 $2`; do
	  echo -n "="
	done
	for jx in `seq 1 $(expr $1 - $2)`; do
	  echo -n " "
	done
	echo  "]"   
}

bar() { ## print a testbar (ANSI) 
  echo -en $E_HIDE
  for i in `seq 1 30`;
	do
	  sleep 0.03
		print_bar 30 $i
		echo -e $E_RETURN $E_UP 
	done
  echo -en $E_SHOW
}

clean() { ## Remove leftover files
  find . -name "*~" -delete
}


traper() {
  echo "Traped SIGINT"
	exit
}

traptest() { ## Trap signal test
  # trap the signal SIGINT to function traper
	trap traper SIGINT

  for i in $(seq 1 30); do
	  sleep 0.1
	  echo "Wating"
	done
}

colors() { ## Color test
  echo -e "${E_RED}RED${E_END}"
	echo -e "${E_GREEN}GREEN${E_END}"
	echo -e "${E_YELLOW}YELLOW${E_END}"
  echo -e "${E_BLUE}BLUE${E_END}"
	echo -e "${E_MAGENTA}MAGENTA${E_END}"
	echo -e "${E_CYAN}CYAN${E_END}"
	echo -e "${E_GRAY}GRAY${E_END}"
	echo -e "${E_DARKGRAY}DARKGRAY${E_END}"
  echo -e "${E_BOLD_RED}BOLD RED${E_END}"
	echo -e "${E_BOLD_GREEN}BOLD GREEN${E_END}"
	echo -e "${E_BOLD_YELLOW}BOLD YELLOW${E_END}"
  echo -e "${E_BOLD_BLUE}BOLD BLUE${E_END}"
	echo -e "${E_BOLD_MAGENTA}BOLD MAGENTA${E_END}"
	echo -e "${E_BOLD_CYAN}BOLD CYAN${E_END}"
	echo -e "${E_WHITE}WHITE${E_END}"
	
	echo -e "${E_WHITE}${ON_RED}WHITE on RED${E_END}"
	echo -e "${E_WHITE}${ON_GREEN}WHITE on GREEN${E_END}"
	echo -e "${E_WHITE}${ON_YELLOW}WHITE on YELLOW${E_END}"
	echo -e "${E_WHITE}${ON_BLUE}WHITE on BLUE${E_END}"
	echo -e "${E_WHITE}${ON_MAGENTA}WHITE on MAGENTA${E_END}"
	echo -e "${E_WHITE}${ON_CYAN}WHITE on CYAN${E_END}"
	echo -e "${E_BLACK}${ON_WHITE}BLACK on WHITE${E_END}"
	
}


commit() { ## Commit project to repository
  git commit -a
	git push --tags -a
}

#--------------------------------------------------------------------- 
# System functions and settings
#---------------------------------------------------------------------

# ANSI foreground colors codes
#
E_BLACK='\e[0;30m'        # Black
E_RED='\e[0;31m'          # Red
E_GREEN='\e[0;32m'        # Green
E_YELLOW='\e[0;33m'       # Yellow
E_BLUE='\e[0;34m'         # Blue
E_MAGENTA='\e[0;35m'      # Magenta
E_CYAN='\e[0;36m'         # Cyan
E_GRAY='\e[0;37m'         # Gray
E_DARKGRAY='\e[1;30m'     # Dark Gray
E_BOLD_RED='\e[1;31m'     # Bold Red
E_BOLD_GREEN='\e[1;32m'   # Bold Green
E_BOLD_YELLOW='\e[1;33m'  # Bold Yellow
E_BOLD_BLUE='\e[1;34m'    # Bold Blue
E_BOLD_MAGENTA='\e[1;35m' # Bold Magenta
E_BOLD_CYAN='\e[1;36m'    # Bold Cyan
E_WHITE='\e[1;37m'        # White

# ANSI background color codes
#
ON_BLACK='\e[40m'         # Black
ON_RED='\e[41m'           # Red
ON_GREEN='\e[42m'         # Green
ON_YELLOW='\e[43m'        # Yellow
ON_BLUE='\e[44m'          # Blue
ON_MAGENTA='\e[45m'       # Magenta
ON_CYAN='\e[46m'          # Cyan
ON_WHITE='\e[47m'         # White

# ANSI cursor operations
#
E_RETURN="\e[F"           # Move cursor to begining of line
E_UP="\e[A"               # Move cursor one line up
E_DOWN="\e[B"             # Move cursor one line down
E_FORWARD="\e[C"          # Move cursor forward
E_BACK="\e[D"             # Move cursor backward
E_HIDE="\e[?25l"          # Hide cursor 
E_SHOW="\e[?25h"          # Show cursor 

E_END="\e[m"              # Clear Attributes

E_INFO=$E_BOLD_CYAN
E_WARNING=$E_BOLD_YELLOW
E_ERROR=$E_BOLD_RED
E_CRITICAL=$ON_RED$E_WHITE

printLine() {
  echo -e "${E_BOLD_WHITE}------------------------------------------------------------------------------${E_END}"
}


#--------------------------------------------------------------------- 
# 
#---------------------------------------------------------------------

#
# Function logging to file
#
# Arg1 String to log to file
# 
bpLog() {
  # check for LOGFILE variable
	if [ -n "$LOGFILE" ]; then
	  ts=$(date +"%Y-%m-%d %H:%M:%S")
 	  echo $ts $1 >> $LOGFILE
	fi
}

log() { ## View logfile
  cat $LOGFILE 
}


bpInfo() {
  bpLog "[Info] $1"
	echo -e "[${E_INFO}INFO${E_END}] $1"
}

bpWarning() {
  bpLog "[WARNING] $1"
  echo -e "[${E_WARNING}Warn${E_END}] $1"
}

bpError() {
  bpLog "[ERROR] $1"
  echo -e "[${E_ERROR}Erro${E_END}] $1"
}

bpCritical() {
  bpLog "[CRITICAL] $1"
  echo -e "[${E_CRITICAL}Crit${E_END}] $1"
	exit
}


# Change setting in config file (key value pair)
#
# arg1 config file
# arg2 setting to change
# arg3 new value for setting
#
chSetting() { 
  SETTING=$2
	VAL=$3
	sed -i "s/^\(${SETTING}\s*=\s*\).*\$/\1$VAL/" $1
}

help() { ## Print this help information
	echo $USAGE
	echo -e $DESC
	echo 
	printf "%-20s  %s\n" "Command" "Help"
	printLine
	IFS=$'\n'
  help_lines=`grep -h "##" $0 | grep -v grep | grep -v help_line`
	for help_line in ${help_lines[@]}; do                                     
    help_command=`echo $help_line | sed -s 's/(.*//'`
		help_info=`echo $help_line | sed -s 's/^.*##//'`
	  printf "${E_BOLD_CYAN}%-20s %s${E_END}" $help_command                  
	  printf "${E_BOLD_GREEN}%s${E_END}\n" $help_info
	done 
	printLine
	echo
}

version() { ## Print version information
  echo $VERSION
}

# Runs a function in this file as a command
runCommand() {
	if [ $# == "1" ]; then
	 
	  # check for a default command
	  if [ -n "$DEFAULT" ]; then
		  $DEFAULT
		  exit
		fi
		
	  echo -e ${E_BOLD_RED}"No command given"${E_END}
		help
		exit
	fi
  funks=`grep "##" $0 | grep -v grep | grep -v help_line`
	for line in ${funks[@]}; do
	  command=`echo $line | sed -s 's/(.*//'`
		if [ "$command" == "$1" ]; then
		  $command $1 $2 $3 $4 $5 $6 $7 $8 $9 $10
			exit
		fi
	done
	echo -e ${E_BOLD_RED}"Command not found"${E_END}
	help
	exit 
}

runCommand $1 $2 $3 $4 $5 $6 $7 $8 $9 $10
